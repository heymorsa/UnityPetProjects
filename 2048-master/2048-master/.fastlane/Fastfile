lane :get_app_id do
  Spaceship::Tunes.login(ENV["FASTLANE_USER"], ENV["FASTLANE_PASSWORD"])

  app = Spaceship::ConnectAPI::App.find(ENV["APP_BUNDLE_ID"])
  app_id = app.id
  puts "app_id: #{app_id}"
end

lane :create_ios_app_with_dependencies do
  app_store_connect_api_key(
    key_id: ENV["ASC_KEY_ID"],
    issuer_id: ENV["ASC_KEY_ISSUER_ID"],
    key_content: ENV["ASC_KEY_CONTENT"],
    is_key_content_base64: true
  )

  create_keychain({
    name: ENV["MATCH_KEYCHAIN_NAME"],
    password: ENV["MATCH_KEYCHAIN_PASSWORD"],
    unlock: true
  })

  produce(
    username: ENV["FASTLANE_USER"],
    app_identifier: ENV["APP_BUNDLE_ID"],
    app_name: ENV["APP_NAME"],
    language: ENV["APP_LANG"],
    app_version: ENV["APP_VERSION"],
    sku: ENV["APP_BUNDLE_ID"],
    team_id: ENV["FASTLANE_TEAM_ID"],
    itc_team_name: ENV["FASTLANE_TEAM_NAME"],
    enable_services: {
      push_notification: "on"
    }
  )

  match({
    type: "appstore",
    app_identifier: ENV["APP_BUNDLE_ID"],
    platform: 'ios',
    readonly: false
  })
end

lane :ios_get_push_certificates do
  app_store_connect_api_key(
    key_id: ENV["ASC_KEY_ID"],
    issuer_id: ENV["ASC_KEY_ISSUER_ID"],
    key_content: ENV["ASC_KEY_CONTENT"],
    is_key_content_base64: true
  )
  
  get_push_certificate(
    development: true,
    force: false,
    username: ENV["FASTLANE_USER"],
    app_identifier: ENV["APP_BUNDLE_ID"],
    team_id: ENV["FASTLANE_TEAM_ID"],
    team_name: ENV["FASTLANE_TEAM_NAME"],
    save_private_key: true,
    output_path: "#{ENV["PUSH_CERTIFICATES_PATH"]}/development"
  )

  get_push_certificate(
    force: false,
    username: ENV["FASTLANE_USER"],
    app_identifier: ENV["APP_BUNDLE_ID"],
    team_id: ENV["FASTLANE_TEAM_ID"],
    team_name: ENV["FASTLANE_TEAM_NAME"],
    save_private_key: true,
    output_path: "#{ENV["PUSH_CERTIFICATES_PATH"]}/production"
  )
end

lane :ios_prepare_project do
  unlock_keychain({
    path: ENV["MATCH_KEYCHAIN_NAME"],
    password: ENV["MATCH_KEYCHAIN_PASSWORD"]
  })

  match({
    type: "appstore",
    app_identifier: ENV["APP_BUNDLE_ID"],
    platform: 'ios',
    readonly: true
  })

  update_code_signing_settings(
    use_automatic_signing: true,
    path: ENV["XCODE_PROJECT_PATH"]
  )

  update_code_signing_settings(
    use_automatic_signing: false,
    team_id: ENV["sigh_#{ENV["APP_BUNDLE_ID"]}_appstore_team-id"],
    code_sign_identity: 'iPhone Distribution',
    targets: 'Unity-iPhone',
    path: ENV["XCODE_PROJECT_PATH"],
    profile_name: ENV["sigh_#{ENV["APP_BUNDLE_ID"]}_appstore_profile-name"],
    profile_uuid: ENV["sigh_#{ENV["APP_BUNDLE_ID"]}_appstore"]
  )

  update_project_provisioning(
    xcodeproj: ENV["XCODE_PROJECT_PATH"],
    profile: ENV["sigh_#{ENV["APP_BUNDLE_ID"]}_appstore_profile-path"],
    code_signing_identity: "iPhone Distribution",
    target_filter: '.*Unity-iPhone.*'
  )
end

lane :ios_fix_plist do
  # fix Info.plist encoding issue
  path_to_plist = "#{ENV["BUILD_PATH"]}/Info.plist"
  info_plist_content = File.open(path_to_plist, "r:bom|utf-8", &:read)
  File.write(path_to_plist, info_plist_content)
end

lane :ios_project_build do
  ios_prepare_project

  build_app(
    project: ENV["XCODE_PROJECT_PATH"],
    scheme: 'Unity-iPhone',
    xcargs: '-allowProvisioningUpdates'
  )
end

lane :ios_workspace_build do
  cocoapods(
    clean_install: true,
    podfile: ENV["BUILD_PATH"]
  )

  ios_prepare_project

  build_app(
    workspace: ENV["XCODE_WORKSPACE_PATH"],
    scheme: 'Unity-iPhone',
    xcargs: '-allowProvisioningUpdates'
  )
end

lane :ios_testflight do
  unlock_keychain({
    path: ENV["MATCH_KEYCHAIN_NAME"],
    password: ENV["MATCH_KEYCHAIN_PASSWORD"]
  })

  app_store_connect_api_key(
    key_id: ENV["ASC_KEY_ID"],
    issuer_id: ENV["ASC_KEY_ISSUER_ID"],
    key_content: ENV["ASC_KEY_CONTENT"],
    is_key_content_base64: true
  )

  ios_fix_plist

  update_info_plist(
    xcodeproj: ENV["XCODE_PROJECT_PATH"],
    plist_path: 'Info.plist',
    block: proc do |plist|
      plist['ITSAppUsesNonExemptEncryption'] = false
    end
  )
  
  if File.exist?(ENV["XCODE_WORKSPACE_PATH"])
    UI.message "Try to build xcworkspace"
    ios_workspace_build
  else  
    UI.message "Try to build xcodeproj"
    ios_project_build 
  end
  
  upload_to_testflight(skip_waiting_for_build_processing: true)
end

lane :ios_ensure_internal_users_group do |options|
  if options == nil
    UI.error "Options is empty"
    next
  end

  internal_group_name = options[:internal_group_name]

  if !internal_group_name
    UI.error "Internal group is not set"
    next
  end

  app_store_connect_api_key(
    key_id: ENV["ASC_KEY_ID"],
    issuer_id: ENV["ASC_KEY_ISSUER_ID"],
    key_content: ENV["ASC_KEY_CONTENT"],
    is_key_content_base64: true
  )

  connect_app = Spaceship::ConnectAPI::App.find(ENV["APP_BUNDLE_ID"])
  beta_groups = connect_app.get_beta_groups(filter: {name: internal_group_name})

  if beta_groups.empty?
    connect_app.create_beta_group(group_name: internal_group_name, is_internal_group: true)
  end
end

lane :ios_invite_user do |options|
  if options == nil
    UI.error "Options is empty"
    next
  end

  user_email = options[:user_email]
  user_first_name = options[:user_first_name]
  user_last_name = options[:user_last_name]

  if !user_email
    UI.error "User email is not set"
    next
  end

  if !user_first_name
    UI.error "User first name is not set"
    next
  end

  if !user_last_name
    UI.error "User last name is not set"
    next
  end

  client = Spaceship::ConnectAPI.login(ENV["FASTLANE_USER"], ENV["FASTLANE_PASSWORD"])
  client.select_team(team_name: ENV["FASTLANE_TEAM_NAME"])

  UI.message "Try to send invite to user: #{user_email} (#{user_first_name} #{user_last_name})"

  Spaceship::ConnectAPI::UserInvitation.create(
    client: client,
    email: user_email,
    first_name: user_first_name,
    last_name: user_last_name,
    roles: ["DEVELOPER"]
  )
end

